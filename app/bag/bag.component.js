"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var dialogs_1 = require("nativescript-angular/directives/dialogs");
var nativescript_fancyalert_1 = require("nativescript-fancyalert");
var bag_modal_1 = require("./bag.modal");
var total_modal_1 = require("./total.modal");
var Toast = require("nativescript-toasts");
var localStorage = require("nativescript-localstorage");
var Sqlite = require("nativescript-sqlite");
var BagComponent = /** @class */ (function () {
    // This pattern makes use of Angular’s dependency injection implementation to inject an instance of the ItemService service into this class. 
    // Angular knows about this service because it is included in your app’s main NgModule, defined in app.module.ts.
    function BagComponent(router, modal, vcRef) {
        this.router = router;
        this.modal = modal;
        this.vcRef = vcRef;
        this.salesId = localStorage.getItem("salesId");
        this.getSales();
    }
    BagComponent.prototype.ngOnInit = function () {
    };
    BagComponent.prototype.ngAfterViewInit = function () {
        this.createOrders();
        console.log("SalesId is: ", this.salesId);
    };
    BagComponent.prototype.goBack = function () {
        this.router.navigate(["main"], { clearHistory: true });
    };
    BagComponent.prototype.onItemTap = function (args) {
        var _this = this;
        var index = args.index;
        var selectedItem = {
            "name": this.sales[index].productName,
            "quantity": this.sales[index].quantityToSale,
            "salesId": this.sales[index].salesId,
            "vendorId": this.sales[index].vendorId,
            "productId": this.sales[index].productId,
            "price": this.sales[index].price
        };
        var editModalOptions = {
            context: { details: selectedItem },
            fullscreen: false,
            viewContainerRef: this.vcRef,
        };
        this.modal.showModal(bag_modal_1.ModalComponent, editModalOptions).then(function (data) {
            if (data.response === "updated") {
                _this.updateQuantityToSale(data.quantity, data.priceSum, data.salesId, data.vendorId, data.productId);
                _this.getSales();
            }
            else if (data.response === "delete") {
                _this.deleteSale(data.salesId, data.vendorId, data.productId);
                _this.getSales();
            }
        });
    };
    BagComponent.prototype.confirmSale = function () {
        var _this = this;
        var totalModalOptions = {
            context: { details: this.sales },
            fullscreen: false,
            viewContainerRef: this.vcRef,
        };
        this.modal.showModal(total_modal_1.TotalModalComponent, totalModalOptions).then(function (data) {
            if (data.response === "confirm") {
                _this.insertOrders(_this.salesId, data.total);
            }
            else if (data.response === "delete") {
                _this.emptyBag(_this.salesId);
            }
            else if (data.response === "cancel") {
                var title = "No Hay Productos";
                var message = "Para hacer una orden el bolso de contener productos a vender";
                var buttonText = "OK";
                nativescript_fancyalert_1.TNSFancyAlert.showWarning(title, message, buttonText).then(function () {
                    _this.router.navigate(["main"]);
                });
            }
        });
    };
    BagComponent.prototype.getSales = function () {
        var _this = this;
        (new Sqlite("booth.db")).then(function (db) {
            db.all("SELECT inventory.productCode, inventory.productName, sales.quantityToSale, inventory.productPrice, sales.priceSum, sales.salesId, sales.vendorId, sales.productId FROM sales, inventory WHERE sales.productId = inventory.id AND sales.salesId = " + _this.salesId).then(function (rows) {
                _this.sales = [];
                for (var row in rows) {
                    _this.sales.push({
                        "productCode": rows[row][0],
                        "productName": rows[row][1],
                        "quantityToSale": rows[row][2],
                        "price": rows[row][3],
                        "priceSum": rows[row][4],
                        "salesId": rows[row][5],
                        "vendorId": rows[row][6],
                        "productId": rows[row][7]
                    });
                }
                console.log(_this.sales);
                _this.database = db;
            }, function (error) {
                console.log("SELECT ERROR", error);
            });
        });
    };
    BagComponent.prototype.deleteSale = function (salesId, vendorId, productId) {
        var _this = this;
        this.database.execSQL("DELETE FROM sales WHERE salesId=" + salesId + " AND vendorId=" + vendorId + " AND productId=" + productId).then(function () {
            _this.database.execSQL("UPDATE inventory SET isVisible=0 WHERE id=" + productId).then(function () {
                var message = 'El Producto fue removido del bolso de ventas';
                var toastOptions = { text: message, duration: Toast.DURATION.SHORT };
                Toast.show(toastOptions);
            }, function (error) {
                console.log("UPDATE ERROR", error);
            });
        }, function (error) {
            console.log("DELETE ERROR: ", error);
        });
    };
    BagComponent.prototype.updateQuantityToSale = function (quantity, priceSum, salesId, vendorId, productId) {
        this.database.execSQL("UPDATE sales SET quantityToSale=" + quantity + ", priceSum=" + priceSum + " WHERE (salesId=" + salesId + ") AND (vendorId=" + vendorId + ") AND (productId=" + productId + ")").then(function () {
            console.log("Cantidad a vendor actializada");
        }, function (error) {
            console.log("UPDATE ERROR", error);
        });
    };
    BagComponent.prototype.emptyBag = function (salesId) {
        var _this = this;
        this.database.execSQL("DELETE FROM sales WHERE salesId=" + salesId).then(function () {
            _this.database.execSQL("UPDATE inventory SET isVisible=0").then(function () {
                var message = 'El Bolso de Ventas fue vaciado';
                var toastOptions = { text: message, duration: Toast.DURATION.SHORT };
                Toast.show(toastOptions);
                _this.router.navigate(["main"]);
            }, function (error) {
                console.log("UPDATE ERROR", error);
            });
        }, function (error) {
            console.log("DELETE ERROR: ", error);
        });
    };
    BagComponent.prototype.createOrders = function () {
        this.database.execSQL("CREATE TABLE IF NOT EXISTS orders(orderId INTEGER PRIMARY KEY AUTOINCREMENT, salesId INTEGER, totalPrice TEXT, FOREIGN KEY (salesId) REFERENCES sales(salesId) ON UPDATE CASCADE ON DELETE CASCADE)").then(function () {
            console.log("Success on creating orders");
        }, function (error) {
            console.log("CREATE TABLE ERROR", error);
        });
    };
    BagComponent.prototype.insertOrders = function (salesId, total) {
        var _this = this;
        this.database.execSQL("INSERT INTO orders (salesId, totalPrice) VALUES (?, ?)", [salesId, total]).then(function () {
            _this.updateBalance();
            _this.router.navigate(["confirm"]);
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    BagComponent.prototype.updateBalance = function () {
        var _this = this;
        this.database.all("SELECT inventory.id, inventory.balance, sales.quantityToSale FROM sales, inventory WHERE sales.productId = inventory.id AND salesId = " + this.salesId).then(function (rows) {
            _this.balance = [];
            for (var row in rows) {
                _this.balance.push({
                    "productId": rows[row][0],
                    "productBalance": rows[row][1],
                    "quantityToReduce": rows[row][2]
                });
            }
            for (var i = 0; i < _this.balance.length; i++) {
                var newBalance = +(_this.balance[i].productBalance - _this.balance[i].quantityToReduce);
                _this.database.execSQL("UPDATE inventory SET balance=" + newBalance + " WHERE id=" + _this.balance[i].productId).then(function () {
                    console.log("Balance actualizado");
                }, function (error) {
                    console.log("UPDATE ERROR", error);
                });
            }
            console.log(_this.balance);
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    BagComponent = __decorate([
        core_1.Component({
            selector: "bag",
            moduleId: module.id,
            templateUrl: "./bag.component.html",
            styleUrls: ["./bag.component.css"]
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions, dialogs_1.ModalDialogService, core_1.ViewContainerRef])
    ], BagComponent);
    return BagComponent;
}());
exports.BagComponent = BagComponent;
//# sourceMappingURL=data:application/json;base64,