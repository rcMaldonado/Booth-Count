"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var router_1 = require("nativescript-angular/router");
var angular_1 = require("nativescript-ui-sidedrawer/angular");
var nativescript_fancyalert_1 = require("nativescript-fancyalert");
var localStorage = require("nativescript-localstorage");
var Toast = require("nativescript-toasts");
var dialogs = require("ui/dialogs");
var Sqlite = require("nativescript-sqlite");
var MainComponent = /** @class */ (function () {
    function MainComponent(_changeDetectionRef, router) {
        this._changeDetectionRef = _changeDetectionRef;
        this.router = router;
        this.sales = [];
        this.createInventory();
        this.createSales();
    }
    MainComponent.prototype.ngAfterViewInit = function () {
        this.drawer = this.drawerComponent.sideDrawer;
        this._changeDetectionRef.detectChanges();
    };
    MainComponent.prototype.ngOnInit = function () {
        this.vendor = localStorage.getItem("vendor");
        this.name = this.vendor.name;
        this.salesId = localStorage.getItem("salesId");
        this.fetch(); // Consigue todos los items del inventario (inventory table).
        this.getSales(); // Consigue todos los item de sales.
        console.log("SalesId is: ", this.salesId);
    };
    //Ejecutada cuando el usuario selecciona una celda.
    MainComponent.prototype.onItemTap = function (args) {
        var _this = this;
        var index = args.index;
        var selectedItem = {
            "productId": this.inventory[index].productId,
            "productCode": this.inventory[index].productCode,
            "productName": this.inventory[index].productName,
            "productCategory": this.inventory[index].productCategory,
            "productPrice": this.inventory[index].productPrice,
            "balance": this.inventory[index].balance,
            "quantity": 1
        };
        if (this.inventory[index].isVisible) {
            dialogs.confirm({
                title: "Eliminar del Bolso",
                message: "¿Desea eliminar el producto del bolso de compra?",
                okButtonText: "Si",
                cancelButtonText: "No"
            }).then(function (result) {
                if (result.valueOf()) {
                    _this.inventory[index].isVisible = 0;
                    _this.updateInventory(selectedItem.productId, _this.inventory[index].isVisible, selectedItem.quantity, selectedItem.productPrice);
                }
            });
        }
        else {
            dialogs.prompt({
                title: "Cantidad a Vender",
                message: "Entre la cantidad de productos que desea vender.",
                okButtonText: "Confirmar",
                cancelButtonText: "Cancelar",
                defaultText: selectedItem.quantity.toString(),
                inputType: dialogs.inputType.text,
            }).then(function (result) {
                // console.log("Dialog result: " + result.result + ", text: " + result.text);
                if (isNaN(+result.text) || result.text === "" || result.text === undefined) {
                    dialogs.confirm({
                        title: "Entre un valor númerico",
                        message: "Favor de entrar un valor númerico para que el producto sea añadido al bolso de ventas.",
                        okButtonText: "OK",
                    });
                }
                else {
                    if (result.result) {
                        selectedItem.quantity = +result.text;
                        _this.sales.push(selectedItem);
                        _this.inventory[index].isVisible = 1;
                        //Se actualiza el inventario indicando que el producto es deseado
                        _this.updateInventory(selectedItem.productId, _this.inventory[index].isVisible, selectedItem.quantity, selectedItem.productPrice);
                        console.log(_this.sales);
                    }
                }
            });
        }
    };
    MainComponent.prototype.createInventory = function () {
        var _this = this;
        (new Sqlite("booth.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS inventory (id INTEGER PRIMARY KEY AUTOINCREMENT, productCode TEXT, productName TEXT, productCategory TEXT, productPrice TEXT, initialBalance INTEGER, balance INTEGER, isVisible INTEGER)").then(function (id) {
                _this.database = db;
                console.log("Success");
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    };
    MainComponent.prototype.fetch = function () {
        var _this = this;
        this.database.all("SELECT * FROM inventory").then(function (rows) {
            _this.inventory = [];
            for (var row in rows) {
                _this.inventory.push({
                    "productId": rows[row][0],
                    "productCode": rows[row][1],
                    "productName": rows[row][2],
                    "productCategory": rows[row][3],
                    "productPrice": rows[row][4],
                    "initialBalance": rows[row][5],
                    "balance": rows[row][6],
                    "isVisible": rows[row][7],
                });
            }
            _this.arrayLength = _this.inventory.length;
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    MainComponent.prototype.updateInventory = function (id, isVisible, quantity, price) {
        var _this = this;
        this.database.execSQL("UPDATE inventory SET isVisible = " + isVisible + " WHERE id = " + id).then(function () {
            console.log("Inventario Actualizado");
            if (isVisible === 1) {
                var priceSum = _this.getPriceSum(quantity, price);
                _this.insertToSales(id, quantity, priceSum);
                _this.getSales();
            }
            else {
                _this.deleteSale(id);
                _this.getSales();
            }
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    /* Se crea la tabla sales en donde se estara guardando la información
    de las ventas que se estan haciendo al momento. Estas se convertiran en orden
    en el bolso de ventas. Esta función es llamada en el constructor. */
    MainComponent.prototype.createSales = function () {
        var _this = this;
        (new Sqlite("booth.db")).then(function (db) {
            var vendorId = "FOREIGN KEY (vendorId) REFERENCES vendor(vendorId) ON UPDATE CASCADE ON DELETE CASCADE, ";
            var productId = " FOREIGN KEY (productId) REFERENCES inventory(id) ON UPDATE CASCADE ON DELETE CASCADE, ";
            db.execSQL("CREATE TABLE IF NOT EXISTS sales (salesId INTEGER, vendorId INTEGER NOT NULL, productId INTEGER NOT NULL, quantityToSale INTEGER, priceSum  TEXT, " + vendorId + productId + " PRIMARY KEY (salesId, vendorId, productId))").then(function (id) {
                _this.database = db;
                console.log("Success");
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    };
    MainComponent.prototype.getSales = function () {
        var _this = this;
        this.database.all("SELECT * FROM sales WHERE sales.salesId = " + this.salesId).then(function (rows) {
            _this.sales = [];
            for (var row in rows) {
                _this.sales.push({
                    "salesId": rows[row][0],
                    "vendorId": rows[row][1],
                    "productId": rows[row][2],
                    "quantityToSale": rows[row][3],
                    "priceSum": rows[row][4]
                });
            }
            console.log(_this.sales);
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    MainComponent.prototype.insertToSales = function (productId, quantity, price) {
        var _this = this;
        this.database.execSQL("INSERT or IGNORE INTO sales (salesId, vendorId, productId, quantityToSale, priceSum) VALUES (?, ?, ?, ?, ?)", [this.salesId, this.vendor.vendorId, productId, quantity, price]).then(function () {
            var message = 'Producto añadido al bolso de ventas';
            var toastOptions = { text: message, duration: Toast.DURATION.SHORT };
            Toast.show(toastOptions);
            _this.getSales();
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    MainComponent.prototype.deleteSale = function (productId) {
        this.database.execSQL("DELETE FROM sales WHERE productId=" + productId).then(function () {
            var message = 'Producto eliminado del bolso de ventas';
            var toastOptions = { text: message, duration: Toast.DURATION.SHORT };
            Toast.show(toastOptions);
        }, function (error) {
            console.log("INSERT ERROR", error);
        });
    };
    MainComponent.prototype.getPriceSum = function (quantity, price) {
        var total = +quantity * +price;
        return total;
    };
    MainComponent.prototype.openDrawer = function () {
        this.drawer.showDrawer();
    };
    MainComponent.prototype.onCloseDrawerTap = function () {
        this.drawer.closeDrawer();
    };
    MainComponent.prototype.orderBag = function () {
        if (this.sales.length === 0) {
            var title = "No Hay Productos";
            var message = "No hay productos en el bolso de venta, favor de seleccionar un producto para producir una orden.";
            var buttonTitle = "OK";
            nativescript_fancyalert_1.TNSFancyAlert.showWarning(title, message, buttonTitle);
        }
        else {
            this.router.navigate(["bag"]);
        }
    };
    MainComponent.prototype.toInicio = function () {
        this.router.navigate(['main'], { clearHistory: true });
    };
    MainComponent.prototype.toInventario = function () {
        this.router.navigate(['inventario'], { clearHistory: true });
    };
    MainComponent.prototype.toOrdenes = function () {
        this.router.navigate(['ordenes'], { clearHistory: true });
    };
    MainComponent.prototype.toAjustes = function () {
        this.router.navigate(['settings'], { clearHistory: true });
    };
    MainComponent.prototype.toAbout = function () {
        this.router.navigate(["about"], { clearHistory: true });
    };
    __decorate([
        core_1.ViewChild(angular_1.RadSideDrawerComponent),
        __metadata("design:type", angular_1.RadSideDrawerComponent)
    ], MainComponent.prototype, "drawerComponent", void 0);
    MainComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: "main",
            templateUrl: "./main.component.html",
            styleUrls: ["./main.component.css"]
        }),
        __metadata("design:paramtypes", [core_1.ChangeDetectorRef, router_1.RouterExtensions])
    ], MainComponent);
    return MainComponent;
}());
exports.MainComponent = MainComponent;
//# sourceMappingURL=data:application/json;base64,