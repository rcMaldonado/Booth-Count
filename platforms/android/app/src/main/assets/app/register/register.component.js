"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var nativescript_fancyalert_1 = require("nativescript-fancyalert");
var router_1 = require("nativescript-angular/router");
var Sqlite = require("nativescript-sqlite");
var RegisterComponent = /** @class */ (function () {
    // This pattern makes use of Angular’s dependency injection implementation to inject an instance of the ItemService service into this class. 
    // Angular knows about this service because it is included in your app’s main NgModule, defined in app.module.ts.
    function RegisterComponent(router) {
        var _this = this;
        this.router = router;
        this.vendor = [];
        (new Sqlite("booth.db")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS vendor(vendorId INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, loginCode TEXT, email TEXT)").then(function (id) {
                _this.database = db;
                console.log("Success");
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.log("OPEN DB ERROR", error);
        });
    }
    RegisterComponent.prototype.ngOnInit = function () {
        this.fetch();
    };
    RegisterComponent.prototype.register = function () {
        var _this = this;
        if (this.validate()) {
            this.database.all("SELECT * FROM vendor WHERE loginCode=" + this.loginCode).then(function (rows) {
                _this.vendor = [];
                console.log(rows.length);
                for (var row in rows) {
                    _this.vendor.push({
                        "vendorId": rows[row][0],
                        "name": rows[row][1],
                        "loginCode": rows[row][2],
                        "email": rows[row][3]
                    });
                }
                if (_this.vendor.length > 0) {
                    var title = "Código Invalido";
                    var message = "El código entrado no es valido por favor use otro código";
                    var buttonTitle = "OK";
                    nativescript_fancyalert_1.TNSFancyAlert.showError(title, message, buttonTitle);
                }
                else {
                    _this.database.execSQL("INSERT INTO vendor (name, loginCode, email) VALUES (?, ?, ?)", [_this.name, _this.loginCode, _this.email]).then(function (id) {
                        var title = '¡Felicidades! 🎉';
                        var message = _this.name + " tu cuenta ha sido creada exitosamente. Entra tu código en la pantalla de inicio para acceder a tu cuenta.";
                        var buttonTitle = "OK";
                        nativescript_fancyalert_1.TNSFancyAlert.showSuccess(title, message, buttonTitle).then(function () {
                            _this.router.navigate(["login"], { clearHistory: true });
                        });
                    }, function (error) {
                        console.log("INSERT ERROR", error);
                    });
                }
            }, function (error) {
                nativescript_fancyalert_1.TNSFancyAlert.showError('Información Incorrecta', ' No existe un usuario con este código.', 'OK').then(function () {
                    console.log("SELECT ERROR", error);
                });
            });
        }
        else {
            var title = 'Oops 😅';
            var message = 'Llene los campos para registrarse.';
            var buttonTitle = 'OK';
            nativescript_fancyalert_1.TNSFancyAlert.showWarning(title, message, buttonTitle);
        }
    };
    RegisterComponent.prototype.validate = function () {
        var flag;
        if (this.name === undefined || this.loginCode === undefined || this.email === undefined) {
            flag = false;
        }
        else {
            flag = true;
        }
        return flag;
    };
    RegisterComponent.prototype.fetch = function () {
        var _this = this;
        this.database.all("SELECT * FROM vendor").then(function (rows) {
            _this.vendor = [];
            for (var row in rows) {
                _this.vendor.push({
                    "vendorId": rows[row][0],
                    "name": rows[row][1],
                    "loginCode": rows[row][2],
                    "email": rows[row][3]
                });
            }
            console.log(_this.vendor);
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    RegisterComponent.prototype.goBack = function () {
        this.router.back();
    };
    RegisterComponent = __decorate([
        core_1.Component({
            selector: "register",
            moduleId: module.id,
            templateUrl: "./register.component.html",
            styleUrls: ["./register.component.css"]
        }),
        __metadata("design:paramtypes", [router_1.RouterExtensions])
    ], RegisterComponent);
    return RegisterComponent;
}());
exports.RegisterComponent = RegisterComponent;
//# sourceMappingURL=data:application/json;base64,